<?php
define('HOSTING_SCRATCHPADS_PROFILE_NAME', 'scratchpad_2');
define('HOSTING_SCRATCHPADS_TRAINING_PROFILE_NAME', 'scratchpad_2_training');

/**
 * Implements hook_menu()
 */
function hosting_scratchpads_menu(){
  return array(
    'node/add/site/multi' => array(
      'title' => 'Create multiple sites',
      'description' => 'Create multiple sites with a similar URL. This is useful for creating the training sites for a training course.',
      'access arguments' => array(
        'create site'
      ),
      'page callback' => 'drupal_get_form',
      'page arguments' => array(
        'hosting_scratchpads_multisite_form'
      )
    )
  );
}

/**
 * Form for creating multiple sites
 */
function hosting_scratchpads_multisite_form($form, &$form_state){
  module_load_include('pages.inc', 'node');
  $node = (object)array(
    'uid' => $user->uid,
    'name' => (isset($user->name) ? $user->name : ''),
    'type' => 'site',
    'language' => LANGUAGE_NONE
  );
  $site_form = drupal_get_form('site_node_form', $node);
  drupal_set_title(t('Create multiple sites'), PASS_THROUGH);
  $platform = 0;
  foreach($site_form['platform']['#options'] as $key => $value){
    // We default to the scratchpads-master platform, in case we do not
    // have a stable platform
    if($key > $platform && ($value == 'scratchpads-master' || preg_match('/scratchpads-2.[0-9]*.[0-9]*/', $value))){
      $platform = $key;
    }
  }
  return array(
    'domain' => array(
      '#type' => 'textfield',
      '#title' => t('Domain name(s)'),
      '#description' => t('A range must be included in the domain name.  This must be in the format "[x-y]" where x and y are both integers, and y is greater than x.  e.g. <strong>training[1-20].taxon.name</strong>')
    ),
    'profile' => array(
      '#type' => 'radios',
      '#title' => t('Install profile'),
      '#description' => t('The type of site to install.'),
      '#options' => $site_form['profile']['#options'],
      '#default_value' => _hosting_scratchpads_get_profile_nid(HOSTING_SCRATCHPADS_TRAINING_PROFILE_NAME)
    ),
    'platform' => array(
      '#type' => 'value',
      '#value' => $platform
    ),
    'actions' => array(
      '#type' => 'actions',
      'submit' => array(
        '#type' => 'submit',
        '#value' => t('Save')
      )
    )
  );
}

/**
 * Submit function for the above form.
 */
function hosting_scratchpads_multisite_form_validate($form, &$form_state){
  if(strpos($form_state['values']['domain'], '[') === FALSE || strpos($form_state['values']['domain'], ']') === FALSE){
    form_set_error('domain', t('A valid range must be included in the format "[x-y]"'));
  }else{
    // We've got "[" and "]", now check that there is a range in between them.
    $parts = preg_split('/[\[\]]/', $form_state['values']['domain']);
    $range_parts = explode("-", $parts[1]);
    if(!is_numeric($range_parts[0]) || !is_numeric($range_parts[1])){
      form_set_error('domain', t('The range you have provided does not appear to be numeric'));
    }else{
      if($range_parts[0] >= $range_parts[1]){
        form_set_error('domain', t('Please ensure the first number in your range is smaller than the second.'));
      }
    }
  }
}

/**
 * Submit function for the above form.
 */
function hosting_scratchpads_multisite_form_submit($form, &$form_state){
  $parts = preg_split('/[\[\]]/', $form_state['values']['domain']);
  $range_parts = explode("-", $parts[1]);
  for($i = $range_parts[0]; $i <= $range_parts[1]; $i++){
    // Set correct title
    $title = $parts[0] . $i . $parts[2];
    global $user;
    // Get the DB server with the least number of sites
    // Note, we do this EVERY time to ensure there is an even spread across each
    // of the DB servers.
    $query = db_select('hosting_db_server', 'd');
    $query->innerJoin('node', 'n', 'd.nid = n.nid');
    $query->leftJoin('hosting_site', 's', 's.db_server = n.nid');
    $query->condition('n.title', variable_get('hosting_scratchpads_db_name_starts', 'sp') . '%', 'LIKE');
    $query->fields('n', array(
      'nid'
    ));
    $query->groupBy('n.nid');
    $alias = $query->addExpression('COUNT(*)', 'order_by_count');
    $query->orderBy($alias);
    $results = $query->execute()->fetch();
    // Save the node.
    // FIXME - it's possible some of these attributes can be removed, but it's
    // simpler to leave them in.
    $node = (object)array(
      'uid' => $user->uid,
      'title' => $title,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
      'sticky' => 0,
      'type' => 'site',
      'language' => LANGUAGE_NONE,
      'client' => 3556,
      'db_server' => $results->nid,
      'platform' => $form_state['values']['platform'],
      'profile' => $form_state['values']['profile'],
      'site_language' => 'en',
      'site_status' => 0,
      'verified' => 0,
      'hosting_name' => $title,
      'redirection' => 0,
      'aliases' => array(),
      'site_domain' => $title
    );
    node_save($node);
  }
}

/**
 * Implements hook_allow_domain()
 *
 * We restrict access to .scratchpads.eu and taxon.name
 */
function hosting_scratchpads_allow_domain($url, $params){
  global $user;
  if($user->uid == 0 && (substr($url, -11) == '.taxon.name' || substr($url, -15) == '.scratchpads.eu')){
    return FALSE;
  }
  return TRUE;
}

/**
 * Implements hook_block_info()
 */
function hosting_scratchpads_block_info(){
  return array(
    'logo' => array(
      'info' => t('Scratchpads logo'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 1,
      'region' => 'logo'
    ),
    'instructions' => array(
      'info' => t('Scratchpads signup instructions'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 1,
      'region' => 'sidebar_first'
    ),
    'menu' => array(
      'info' => t('Scratchpads menu links'),
      'cache' => DRUPAL_CACHE_GLOBAL,
      'status' => 1,
      'region' => 'menu'
    )
  );
}

/**
 * Implements hook_block_view()
 */
function hosting_scratchpads_block_view($delta = 'logo'){
  switch($delta){
    case 'logo':
      return array(
        'subject' => '',
        'content' => '<div><a href="/"><img src="http://scratchpads.eu/sites/all/themes/scratchpads_eu/images/logo-green.png"/></a></div>'
      );
    case 'instructions':
      return array(
        'subject' => '',
        'content' => '<p>Signing up for a Scratchpad is free, quick and simple! No knowledge of website creation is required and your site can cover any aspect of natural history (a taxonomic group, a geographical area, club or society, journal, etc).</p>'
      );
    case 'menu':
      return array(
        'subject' => '',
        'content' => '<ul class="menu"><li class="first leaf has-children active menu-mlid-487"><a href="http://scratchpads.eu/" id="menu-item-home" class="active">Home</a></li>
<li class="leaf has-children menu-mlid-400"><a href="http://scratchpads.eu/news" id="menu-item-news">News</a></li>
<li class="leaf has-children menu-mlid-399"><a href="http://scratchpads.eu/explore" id="menu-item-explore">Explore</a></li>
<li class="leaf has-children menu-mlid-624"><a href="http://scratchpads.eu/support" id="menu-item-support">Support</a></li>
<li class="leaf has-children menu-mlid-406"><a href="http://scratchpads.eu/develop" id="menu-item-develop">Develop</a></li>
<li class="last leaf has-children menu-mlid-407"><a href="http://scratchpads.eu/about" id="menu-item-about">About us</a></li>
</ul>'
      );
  }
}

/**
 * Implements hook_node_insert()
 */
function hosting_scratchpads_node_insert($node){
  static $previous_node = FALSE;
  if(!$previous_node){
    $previous_node = $node;
  }
  if($node->type == 'site'){
    if($node->uid == 0){
      // We've failed to save the user associated with the client, which
      // suggests that a user with the same email address already exists. We
      // load that client and swap.
      $query = db_select('node', 'n');
      $query->innerJoin('users', 'u', 'u.uid = n.uid');
      $query->condition('n.type', 'client')->condition('u.mail', $node->email);
      $query->fields('n', array(
        'nid'
      ));
      $query->fields('u', array(
        'uid'
      ));
      $result = $query->execute()->fetch();
      // Delete the extra client that we do not require.
      node_delete($node->client);
      // Update this site node and the existing client node to point to the
      // existing user.
      db_update('node')->condition('nid', array(
        $node->nid,
        $result->nid
      ))->fields(array(
        'uid' => $result->uid
      ))->execute();
      db_update('node_revision')->condition('nid', array(
        $node->nid,
        $result->nid
      ))->fields(array(
        'uid' => $result->uid
      ))->execute();
      // Update the link to the client node.
      db_update('hosting_site')->condition('nid', $node->nid)->fields(array(
        'client' => $result->nid
      ))->execute();
    }
    db_insert('hosting_scratchpads')->fields(array(
      'nid' => $node->nid,
      'client_title' => $previous_node->client_title,
      'client_name' => $previous_node->title,
      'client_email' => $previous_node->email,
      'client_institution' => $previous_node->client_institution,
      'client_country' => $previous_node->client_country,
      'site_title' => $node->site_title,
      'site_domain' => $node->title,
      'site_taxonomic_scope' => $node->site_taxonomic_scope,
      'site_comments' => $node->site_comments
    ))->execute();
  }
}

/**
 * Implements hook_node_load()
 */
function hosting_scratchpads_node_load($nodes, $types){
  // Decide whether any of $types are relevant to our purposes.
  if(in_array('site', $types)){
    // Gather our extra data for each of these nodes.
    $results = db_select('hosting_scratchpads', 'h')->fields('h')->condition('nid', array_keys($nodes))->execute();
    // Add our extra data to the node objects.
    foreach($results as $record){
      $nid = $record->nid;
      unset($record->nid);
      foreach($record as $key => $column){
        $nodes[$nid]->$key = $column;
      }
    }
  }
}

/**
 * Tweak the view of the site node.
 */
function hosting_scratchpads_node_view_alter(&$build){
  $weight = 100;
  if($build['#node']->type == 'site'){
    foreach(array(
      'client_title',
      'client_name',
      'client_email',
      'client_institution',
      'client_country',
      'site_title',
      'site_domain',
      'site_taxonomic_scope',
      'site_comments'
    ) as $key){
      if(isset($build['#node']->$key)){
        $name = explode('_', $key);
        array_shift($name);
        $name = t(ucfirst(implode(' ', $name)));
        $build['info'][$key] = array(
          '#type' => 'item',
          '#title' => $name,
          '#markup' => $build['#node']->$key . '&nbsp;',
          '#weight' => $weight++
        );
      }
    }
  }
}

/**
 * Validate the site title.
 */
function hosting_scratchpads_site_domain_validate(&$form, &$form_state){
  // Check that the title isn't already in use. Next, check the domain name
  // resolves to Quartz If we have dots, then it is not a subdomain of
  // myspecies.info - we need to check it.
  if(strpos($form_state['values']['title'], '.')){
    // We have a new domain, lets check it's pointing at Quartz
    if(($submitted_host_ip = gethostbyname($form_state['values']['title'])) !== ($server_host_ip = gethostbyname($_SERVER['HTTP_HOST']))){
      form_set_error('title', 'The domain name you have entered is not pointing at our server:<ul>
  <li>' . $form_state['values']['title'] . ' = ' . $submitted_host_ip . '</li>
  <li>' . $_SERVER['HTTP_HOST'] . ' = ' . $server_host_ip . '</li>
</ul>');
    }
  }else{
    if(!preg_match('/^[a-z0-9][a-z0-9\-]*[a-z0-9]$/', strtolower(trim($form_state['values']['title'])))){
      form_set_error('title', 'The sub-domain you have entered is not valid. Please only use the characters a-z and 0-9 with dashes (-) allowed within the word.');
    }
    form_set_value($form['site']['title'], trim($form_state['values']['title']) . '.myspecies.info', $form_state);
  }
  // Also check that the domain name is unique.
  $query = db_select('node', 'n');
  $query->innerJoin('hosting_site', 's', 'n.vid = s.vid');
  $query->condition('s.status', -2, '>');
  $query->condition('n.title', $form_state['values']['title']);
  $query = $query->countQuery();
  if($query->execute()->fetchField()){
    form_set_error('title', 'The domain name you have chosen is already in use.');
  }
}

function _hosting_scratchpads_get_profile_nid($profile_name) {
  $query = db_select('hosting_package', 'p');
  $query->leftJoin('node', 'n', 'p.nid = n.nid');
  $query->condition('p.package_type', 'profile');
  $query->condition('p.short_name', $profile_name);
  $query->fields('n', array('nid'));
  $results = $query->execute()->fetch();
  return $results->nid;
}

/**
 * Implements hook_form_alter()
 */
function hosting_scratchpads_form_alter(&$form, &$form_state, $form_id){
  global $user;
  if($form_id == 'site_node_form' && !empty($form['profile']['#options'])){
    foreach($form['profile']['#options'] as $key => $value){
      if(strpos(strtolower($value), 'emonocot') !== FALSE || strpos(strtolower($value), 'bioblitz') !== FALSE || strpos(strtolower($value), 'scratchpad_profile') !== FALSE || strpos(strtolower($value), 'scratchpad sandbox') !== FALSE || strpos(strtolower($value), 'scratchpad_2_migrate') !== FALSE || strpos(strtolower($value), 'drupal') !== FALSE){
        unset($form['profile']['#options'][$key]);
      }
    }
  }
  $scratchpads_profile_nid = _hosting_scratchpads_get_profile_nid(HOSTING_SCRATCHPADS_PROFILE_NAME);
  // We do not allow the creation of Scratchpads using the standard form.
  if(arg(1) != 'signup' && $form_id == 'site_node_form' && !empty($form['profile']['#options'][$scratchpads_profile_nid])){
    if($_GET['q'] == 'node/add/site'){
      $form['message'] = array(
        '#weight' => -100000,
        '#markup' => '<p>Multiple sites can be created using the <a href="' . url('node/add/site/multi') . '">multisite form</a>.</p>',
        '#type' => 'markup'
      );
    }
    unset($form['profile']['#options'][$scratchpads_profile_nid]);
  }else if(arg(1) == 'signup'){
    if($user->uid){
      // FIXME:.This is breaking server_node_form drush submission
      // drupal_goto('hosting/sites');
    }
    switch($form_id){
      case 'site_node_form':
        // Remove some of the shitty profiles that we really do not need.
        // Set the profile
        foreach($form['profile']['#options'] as $key => $value){
          if($value == 'Scratchpad 2 <em>(scratchpad_2)</em>'){
            $form['profile'] = array(
              '#type' => 'value',
              '#value' => $key
            );
            break;
          }
        }
        // Set the platform
        $platform = 0;
        foreach($form['platform']['#options'] as $key => $value){
          // We default to the scratchpads-master platform, in case we do not
          // have a stable platform
          if($key > $platform && ($value == 'scratchpads-master' || preg_match('/scratchpads-2.[0-9]*.[0-9]*/', $value))){
            $platform = $key;
          }
        }
        if($platform){
          $form['platform'] = array(
            '#type' => 'value',
            '#value' => $platform
          );
        }
        $form['site_language'] = array(
          '#type' => 'value',
          '#value' => 'en'
        );
        // Get the DB server with the least number of sites
        $query = db_select('hosting_db_server', 'd');
        $query->innerJoin('node', 'n', 'd.nid = n.nid');
        $query->leftJoin('hosting_site', 's', 's.db_server = n.nid');
        $query->condition('n.title', variable_get('hosting_scratchpads_db_name_starts', 'sp') . '%', 'LIKE');
        $query->fields('n', array(
          'nid'
        ));
        $query->groupBy('n.nid');
        $alias = $query->addExpression('COUNT(*)', 'order_by_count');
        $query->orderBy($alias);
        $results = $query->execute()->fetch();
        if($results->nid){
          $form['db_server'] = array(
            '#type' => 'value',
            '#value' => $results->nid
          );
        }
        $form['form_title'] = array(
          '#weight' => -1000,
          '#markup' => '<h2>' . t('About your site') . '</h2>'
        );
        $form['title']['#description'] = '<h3>Your sub-domain name should be:</h3><ul>  <li><em>Short</em>. You can choose up to 34 characters, but short names and single words are easier to remember. We recommend no more than 20 characters.</li>  <li><em>Simple</em>. The subdomain name should be your website\'s name.</li>  <li><em>Legal</em>. Spaces and special characters are not allowed. Remember also that domain names are NOT case sensitive.</li>  <li><em>Relevant</em>. For a taxonomic site, enter the highest taxon you will be working on, e.g. "diptera" or "britishdiptera".  For a society site, enter the society\'s acronym, e.g. "bogsoc" or "windsoc".</li></ul><p>An example sub-domain for a Scratchpad on mice/rats would be <strong>muridae</strong>, which would give a Scratchpad URL of http://muridae.myspecies.info.</p><h3>Using your own domain</h3><p>Users are more than welcome to purchase their own domain name for use with a Scratchpad.  All that is required is that the domain name is pointed at our server quartz.nhm.ac.uk which has the IP address 157.140.2.32.  If using your own domain name, the domain purchase should be completed before the Scratchpad application.</p><p>If you would like to use your own domain name, then enter the full domain name (without "http://").</p>';
        $form['title']['#title'] = 'Subdomain name';
        $form['site_title'] = array(
          '#required' => TRUE,
          '#type' => 'textfield',
          '#title' => t('Site title'),
          '#weight' => -11,
          '#description' => 'The site title will appear in the header section of your Scratchpad by default but can be removed later.'
        );
        $form['site_taxonomic_scope'] = array(
          '#required' => TRUE,
          '#type' => 'textfield',
          '#title' => t('Taxonomic scope'),
          '#weight' => -9,
          '#description' => t('The taxonomic group which best describes what taxa will be featured on your site. e.g. Insecta, Aves, Phthiraptera, Dragons')
        );
        $form['site_comments'] = array(
          '#type' => 'textarea',
          '#title' => t('Comments'),
          '#weight' => -8
        );
        $form['#prefix'] = '<div class="scratchpads-hosting-site-form">';
        $form['#suffix'] = '</div>';
        break;
      case 'client_node_form':
        $form['email']['#description'] = 'Your email address. This must be a valid email address, as your password will be sent to it';
        $form['#prefix'] = '<div class="scratchpads-hosting-client-form" >';
        $form['#suffix'] = '</div>';
        $form['title']['#title'] = t('Full name');
        $form['title']['#weight'] = -10;
        $form['client_title'] = array(
          '#title' => t('Title'),
          '#required' => TRUE,
          '#type' => 'select',
          '#weight' => -11,
          '#options' => array(
            'Mr' => 'Mr',
            'Mrs' => 'Mrs',
            'Miss' => 'Miss',
            'Ms' => 'Ms',
            'Dr' => 'Dr',
            'Prof.' => 'Prof',
            'Other' => 'Other'
          )
        );
        $form['client_institution'] = array(
          '#title' => t('Institution'),
          '#description' => t('The institution with which you are most closely associated. If retired or amateur, please insert "N/A"'),
          '#type' => 'textfield',
          '#required' => TRUE
        );
        $form['client_country'] = array(
          '#title' => t('Country'),
          '#description' => t('The country that you are based in.'),
          '#type' => 'select',
          '#required' => TRUE,
          '#options' => array(
            NULL => '-- Select --',
            'AF' => 'Afghanistan',
            'AX' => 'Aland Islands',
            'AL' => 'Albania',
            'DZ' => 'Algeria',
            'AS' => 'American Samoa',
            'AD' => 'Andorra',
            'AO' => 'Angola',
            'AI' => 'Anguilla',
            'AQ' => 'Antarctica',
            'AG' => 'Antigua and Barbuda',
            'AR' => 'Argentina',
            'AM' => 'Armenia',
            'AW' => 'Aruba',
            'AU' => 'Australia',
            'AT' => 'Austria',
            'AZ' => 'Azerbaijan',
            'BS' => 'Bahamas',
            'BH' => 'Bahrain',
            'BD' => 'Bangladesh',
            'BB' => 'Barbados',
            'BY' => 'Belarus',
            'BE' => 'Belgium',
            'BZ' => 'Belize',
            'BJ' => 'Benin',
            'BM' => 'Bermuda',
            'BT' => 'Bhutan',
            'BO' => 'Bolivia',
            'BQ' => 'Bonaire, Sint Eustatius and Saba',
            'BA' => 'Bosnia and Herzegovina',
            'BW' => 'Botswana',
            'BV' => 'Bouvet Island',
            'BR' => 'Brazil',
            'IO' => 'British Indian Ocean Territory',
            'VG' => 'British Virgin Islands',
            'BN' => 'Brunei',
            'BG' => 'Bulgaria',
            'BF' => 'Burkina Faso',
            'BI' => 'Burundi',
            'KH' => 'Cambodia',
            'CM' => 'Cameroon',
            'CA' => 'Canada',
            'CV' => 'Cape Verde',
            'KY' => 'Cayman Islands',
            'CF' => 'Central African Republic',
            'TD' => 'Chad',
            'CL' => 'Chile',
            'CN' => 'China',
            'CX' => 'Christmas Island',
            'CC' => 'Cocos (Keeling) Islands',
            'CO' => 'Colombia',
            'KM' => 'Comoros',
            'CG' => 'Congo (Brazzaville)',
            'CD' => 'Congo (Kinshasa)',
            'CK' => 'Cook Islands',
            'CR' => 'Costa Rica',
            'HR' => 'Croatia',
            'CU' => 'Cuba',
            'CW' => 'Curaçao',
            'CY' => 'Cyprus',
            'CZ' => 'Czech Republic',
            'DK' => 'Denmark',
            'DJ' => 'Djibouti',
            'DM' => 'Dominica',
            'DO' => 'Dominican Republic',
            'EC' => 'Ecuador',
            'EG' => 'Egypt',
            'SV' => 'El Salvador',
            'GQ' => 'Equatorial Guinea',
            'ER' => 'Eritrea',
            'EE' => 'Estonia',
            'ET' => 'Ethiopia',
            'FK' => 'Falkland Islands',
            'FO' => 'Faroe Islands',
            'FJ' => 'Fiji',
            'FI' => 'Finland',
            'FR' => 'France',
            'GF' => 'French Guiana',
            'PF' => 'French Polynesia',
            'TF' => 'French Southern Territories',
            'GA' => 'Gabon',
            'GM' => 'Gambia',
            'GE' => 'Georgia',
            'DE' => 'Germany',
            'GH' => 'Ghana',
            'GI' => 'Gibraltar',
            'GR' => 'Greece',
            'GL' => 'Greenland',
            'GD' => 'Grenada',
            'GP' => 'Guadeloupe',
            'GU' => 'Guam',
            'GT' => 'Guatemala',
            'GG' => 'Guernsey',
            'GN' => 'Guinea',
            'GW' => 'Guinea-Bissau',
            'GY' => 'Guyana',
            'HT' => 'Haiti',
            'HM' => 'Heard Island and McDonald Islands',
            'HN' => 'Honduras',
            'HK' => 'Hong Kong S.A.R., China',
            'HU' => 'Hungary',
            'IS' => 'Iceland',
            'IN' => 'India',
            'ID' => 'Indonesia',
            'IR' => 'Iran',
            'IQ' => 'Iraq',
            'IE' => 'Ireland',
            'IM' => 'Isle of Man',
            'IL' => 'Israel',
            'IT' => 'Italy',
            'CI' => 'Ivory Coast',
            'JM' => 'Jamaica',
            'JP' => 'Japan',
            'JE' => 'Jersey',
            'JO' => 'Jordan',
            'KZ' => 'Kazakhstan',
            'KE' => 'Kenya',
            'KI' => 'Kiribati',
            'KW' => 'Kuwait',
            'KG' => 'Kyrgyzstan',
            'LA' => 'Laos',
            'LV' => 'Latvia',
            'LB' => 'Lebanon',
            'LS' => 'Lesotho',
            'LR' => 'Liberia',
            'LY' => 'Libya',
            'LI' => 'Liechtenstein',
            'LT' => 'Lithuania',
            'LU' => 'Luxembourg',
            'MO' => 'Macao S.A.R., China',
            'MK' => 'Macedonia',
            'MG' => 'Madagascar',
            'MW' => 'Malawi',
            'MY' => 'Malaysia',
            'MV' => 'Maldives',
            'ML' => 'Mali',
            'MT' => 'Malta',
            'MH' => 'Marshall Islands',
            'MQ' => 'Martinique',
            'MR' => 'Mauritania',
            'MU' => 'Mauritius',
            'YT' => 'Mayotte',
            'MX' => 'Mexico',
            'FM' => 'Micronesia',
            'MD' => 'Moldova',
            'MC' => 'Monaco',
            'MN' => 'Mongolia',
            'ME' => 'Montenegro',
            'MS' => 'Montserrat',
            'MA' => 'Morocco',
            'MZ' => 'Mozambique',
            'MM' => 'Myanmar',
            'NA' => 'Namibia',
            'NR' => 'Nauru',
            'NP' => 'Nepal',
            'NL' => 'Netherlands',
            'AN' => 'Netherlands Antilles',
            'NC' => 'New Caledonia',
            'NZ' => 'New Zealand',
            'NI' => 'Nicaragua',
            'NE' => 'Niger',
            'NG' => 'Nigeria',
            'NU' => 'Niue',
            'NF' => 'Norfolk Island',
            'KP' => 'North Korea',
            'MP' => 'Northern Mariana Islands',
            'NO' => 'Norway',
            'OM' => 'Oman',
            'PK' => 'Pakistan',
            'PW' => 'Palau',
            'PS' => 'Palestinian Territory',
            'PA' => 'Panama',
            'PG' => 'Papua New Guinea',
            'PY' => 'Paraguay',
            'PE' => 'Peru',
            'PH' => 'Philippines',
            'PN' => 'Pitcairn',
            'PL' => 'Poland',
            'PT' => 'Portugal',
            'PR' => 'Puerto Rico',
            'QA' => 'Qatar',
            'RE' => 'Reunion',
            'RO' => 'Romania',
            'RU' => 'Russia',
            'RW' => 'Rwanda',
            'BL' => 'Saint Barthélemy',
            'SH' => 'Saint Helena',
            'KN' => 'Saint Kitts and Nevis',
            'LC' => 'Saint Lucia',
            'MF' => 'Saint Martin (French part)',
            'PM' => 'Saint Pierre and Miquelon',
            'VC' => 'Saint Vincent and the Grenadines',
            'WS' => 'Samoa',
            'SM' => 'San Marino',
            'ST' => 'Sao Tome and Principe',
            'SA' => 'Saudi Arabia',
            'SN' => 'Senegal',
            'RS' => 'Serbia',
            'SC' => 'Seychelles',
            'SL' => 'Sierra Leone',
            'SG' => 'Singapore',
            'SX' => 'Sint Maarten (Dutch part)',
            'SK' => 'Slovakia',
            'SI' => 'Slovenia',
            'SB' => 'Solomon Islands',
            'SO' => 'Somalia',
            'ZA' => 'South Africa',
            'GS' => 'South Georgia and the South Sandwich Islands',
            'KR' => 'South Korea',
            'SS' => 'South Sudan',
            'ES' => 'Spain',
            'LK' => 'Sri Lanka',
            'SD' => 'Sudan',
            'SR' => 'Suriname',
            'SJ' => 'Svalbard and Jan Mayen',
            'SZ' => 'Swaziland',
            'SE' => 'Sweden',
            'CH' => 'Switzerland',
            'SY' => 'Syria',
            'TW' => 'Taiwan',
            'TJ' => 'Tajikistan',
            'TZ' => 'Tanzania',
            'TH' => 'Thailand',
            'TL' => 'Timor-Leste',
            'TG' => 'Togo',
            'TK' => 'Tokelau',
            'TO' => 'Tonga',
            'TT' => 'Trinidad and Tobago',
            'TN' => 'Tunisia',
            'TR' => 'Turkey',
            'TM' => 'Turkmenistan',
            'TC' => 'Turks and Caicos Islands',
            'TV' => 'Tuvalu',
            'VI' => 'U.S. Virgin Islands',
            'UG' => 'Uganda',
            'UA' => 'Ukraine',
            'AE' => 'United Arab Emirates',
            'GB' => 'United Kingdom',
            'US' => 'United States',
            'UM' => 'United States Minor Outlying Islands',
            'UY' => 'Uruguay',
            'UZ' => 'Uzbekistan',
            'VU' => 'Vanuatu',
            'VA' => 'Vatican',
            'VE' => 'Venezuela',
            'VN' => 'Vietnam',
            'WF' => 'Wallis and Futuna',
            'EH' => 'Western Sahara',
            'YE' => 'Yemen',
            'ZM' => 'Zambia',
            'ZW' => 'Zimbabwe'
          )
        );
        $form['form_title'] = array(
          '#weight' => -1000,
          '#markup' => '<h2>' . t('About you') . '</h2>'
        );
        break;
      case 'hosting_signup_form':
        // Validate the title, adding .myspecies.info if required.
        $form['#validate'] = array(
          'hosting_scratchpads_site_domain_validate'
        );
        $form['#attached']['css'][] = drupal_get_path('module', 'hosting_scratchpads') . '/css/hosting_scratchpads.css';
        $form['#attached']['js'][] = drupal_get_path('module', 'beautytips') . '/js/jquery.bt.min.js';
        $form['#attached']['js'][] = drupal_get_path('module', 'beautytips') . '/js/beautytips.min.js';
        $form['#prefix'] = '<div class="scratchpads-hosting-form">';
        $form['#suffix'] = '</div>';
        break;
    }
  }
}
